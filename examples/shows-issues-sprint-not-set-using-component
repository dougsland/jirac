#!/usr/bin/env python
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import os
import argparse
from jirac import JiraC


def main():
    # Parse command-line arguments
    parser = argparse.ArgumentParser(description="List Jira issues with no sprints for a specified component or set a specified sprint for Jira tickets.")  # noqa: E501
    parser.add_argument('component', nargs='?', help='Component to search for in Jira issues (e.g., QMComponent)')  # noqa: E501
    parser.add_argument('--set-sprint', help='ID of the Sprint to set on the specified issues')  # noqa: E501
    parser.add_argument('--ticket', help='Comma-separated list of Jira tickets (e.g., VROOM-123,VROOM-124)')  # noqa: E501
    args = parser.parse_args()

    # Fetch Jira connection details from environment variables
    server = os.getenv("JIRA_SERVER_URL")
    api_token = os.getenv("JIRA_API_TOKEN")
    username = os.getenv("JIRA_USERNAME")  # Optional if using token-based auth

    if not server or not api_token:
        print("Please set the environment variables: JIRA_SERVER_URL, JIRA_API_TOKEN")  # noqa: E501
        return

    # Initialize Jira client
    jira_client = JiraC(server, api_token, username)

    # Handle setting sprint if specified
    if args.set_sprint and args.ticket:
        tickets = [ticket.strip() for ticket in args.ticket.split(',')]
        for ticket in tickets:
            try:
                issue = jira_client.jira.issue(ticket)
                
                # Update the issue with the new sprint
                # Replace 'customfield_12310940' with the actual Sprint field ID
                issue.update(fields={"customfield_12310940": [{"id": args.set_sprint}]})
                print(f"Sprint for issue {ticket} has been set to '{args.set_sprint}'.")
            except Exception as update_error:
                print(f"Failed to set Sprint for issue {ticket}: {update_error}")
        return

    # If component is provided, list issues with no sprints
    if args.component:
        jql_query = f'component = "{args.component}" AND "Sprint" = EMPTY'
        try:
            issues = jira_client.jira.search_issues(jql_query, maxResults=50)  # Adjust maxResults as needed  # noqa: E501
            total_issues = len(issues)
            if total_issues > 0:
                print(f"Found {total_issues} issues with no sprints set for component '{args.component}':\n")
                for issue in issues:
                    print(f"Issue Key: {issue.key}")
                    print(f"Summary: {issue.fields.summary}")
                    print(f"Assignee: {issue.fields.assignee.displayName if issue.fields.assignee else 'None'}")  # noqa: E501
                    print(f"Description: {issue.fields.description or 'None'}")
                    print("-" * 40)
                print(f"\nTotal number of issues found: {total_issues}")
            else:
                print(f"No issues found with no sprints set for component '{args.component}'.")

        except Exception as e:
            print(f"Error fetching issues: {e}")
    else:
        # If neither component nor update options are specified, show error
        print("Error: You must specify a component to list issues or use --set-sprint and --ticket options to set a sprint.")
        parser.print_help()


if __name__ == "__main__":
    main()
